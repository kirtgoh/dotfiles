snippet lic "Software Lisence" b
//=====================================================================================
// ${1:FILENAME} - ${2:DESCRIPTION}
//
// Copyright (C) 2014 Kirt Goh <kirtgoh@gmail.com>
//=====================================================================================


endsnippet

snippet leetcode "LeetCode Description" b
/*********************************************************************************
 *  Author:      	Kirt Goh, kirtgoh@gmail.com
 *  Date:        	`!v strftime("%b %d, %Y")`
 *  Problem:     	${1:Problem Description}
 *  Difficulty:  	${2:Easy | Normal | Difficult}
 *  Source:      	https://oj.leetcode.com/problems/${3}
 *
 *  Notes:
 * 	${4}
 *  Solution: 		${5}
*********************************************************************************/

endsnippet

snippet once "Include guard" b
#ifndef ${1:FOO_H_HDYSNUYW}
#define $1

$2

#endif /* $1 */
endsnippet

snippet todo "TODO reminder" b
//TODO: ${1:desc} `!v strftime("%c")`
endsnippet

snippet error "ERROR declare" b
#define ERROR(str) ${1:std::cerr}<<"[ERROR ("<<__FILE__<<":"<<__LINE__<<")]: "<<str<<std::endl;
endsnippet

snippet debug "DEBUG declare" b
#define DEBUG(str) ${1:std::cerr}<< str <<std::endl;
endsnippet

snippet debugn "DEBUGN declare" b
#define DEBUG(str) ${1:std::cerr}<< str <<std::endl;
endsnippet

snippet print "PRINT declare" b
#define PRINT(str) ${1:std::cout}<< str <<std::endl;
endsnippet

snippet printn "PRINTN declare" b
#define PRINT(str) ${1:std::cout}<< str <<std::endl;
endsnippet

snippet kgoh "Code Modified declare"
//MOD: `echo $USER` ${1:desc} `!v strftime("%c")`
$2
//END_MOD
endsnippet

snippet for "for loop"
for (size_t ${1:i} = 0; $1 < $2; $1++)
{
	$3
}

endsnippet

snippet class "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
	${1/(\w+).*/$1/}(${2:arguments});
	virtual ~${1/(\w+).*/$1/}();

private:
	${0:/* data */}
};
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> ${3:temp};
endsnippet

snippet vec "std::vector (v)"
std::vector<${1:char}> ${3:temp};
endsnippet

snippet mfun "member func"
${1:void} ${2:`!p snip.rv = snip.basename`}::${3:Func}($4) {
	$0
}
endsnippet

snippet hfun "header func"
${1:void} ${3:Func}($4);
endsnippet

snippet nsp "namespace .. (namespace)" !
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
$0
}${1/.+/ \/\/ namespace /m}$1
endsnippet

snippet uns "unnamed namespace" !
namespace {
$0
}  // unnamed namespace
endsnippet

snippet fori "for int loop (fori)"
for ( ${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2} ) {
	${0:/* code */}
}
endsnippet

snippet ss "std::string"
std::string $0
endsnippet

snippet ssr "std::string"
const std::string &$0
endsnippet

snippet sv "std::vector"
std::vector< ${1:std::string} > $2
endsnippet

snippet svr "std::vector"
const std::vector< ${1:std::string} > &$2
endsnippet

snippet sd "std::"
std::
endsnippet
